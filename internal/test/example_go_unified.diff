diff --git a/.drone.yml b/.drone.yml
new file mode 100644
index 0000000..1b77a7b
--- /dev/null
+++ b/.drone.yml
@@ -0,0 +1,33 @@
+build: &build
+  image: golang:1.11.2
+  environment:
+  - CGO_ENABLED=0
+  - GOOS=linux
+  commands:
+  - go get -u github.com/golang/dep/cmd/dep
+  - go get -u github.com/alecthomas/gometalinter
+  - gometalinter --install
+  - dep ensure
+  - go test -v -coverpkg=./... -coverprofile=coverage.txt ./...
+  - go tool cover -func=coverage.txt
+  - ./bin/lint.sh
+  - go build -a -installsuffix cgo -o plugin .
+
+workspace:
+  base: /go
+  path: src/github.com/target/pull-request-code-coverage
+
+pipeline:
+
+  #build on push
+  build-push:
+    when:
+      event: [push]
+      branch: [master]
+    <<: *build
+
+  #build on pr
+  build-on-pr:
+    when:
+      event: [pull_request]
+    <<: *build
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..432f8c2
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+.idea
+coverage.txt
+vendor/
+/plugin
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..b8f15a5
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,18 @@
+FROM golang:1.11.2
+RUN go get -u github.com/golang/dep/cmd/dep
+RUN go get -u github.com/alecthomas/gometalinter
+RUN gometalinter --install
+COPY . /go/src/github.com/target/pull-request-code-coverage
+WORKDIR /go/src/github.com/target/pull-request-code-coverage
+RUN dep ensure
+RUN go test -v -coverpkg=./... -coverprofile=coverage.txt ./...
+RUN go tool cover -func=coverage.txt
+RUN ./bin/lint.sh
+RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o plugin .
+
+FROM alpine:latest
+RUN apk --no-cache add ca-certificates git
+WORKDIR /root/
+COPY --from=0 /go/src/github.com/target/pull-request-code-coverage/plugin .
+COPY scripts/start.sh .
+CMD ["./start.sh"]
\ No newline at end of file
diff --git a/Gopkg.lock b/Gopkg.lock
new file mode 100644
index 0000000..13d44da
--- /dev/null
+++ b/Gopkg.lock
@@ -0,0 +1,44 @@
+# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.
+
+
+[[projects]]
+  digest = "1:0a69a1c0db3591fcefb47f115b224592c8dfa4368b7ba9fae509d5e16cdc95c8"
+  name = "github.com/konsorten/go-windows-terminal-sequences"
+  packages = ["."]
+  pruneopts = "UT"
+  revision = "5c8c8bd35d3832f5d134ae1e1e375b69a4d25242"
+  version = "v1.0.1"
+
+[[projects]]
+  digest = "1:69b1cc331fca23d702bd72f860c6a647afd0aa9fcbc1d0659b1365e26546dd70"
+  name = "github.com/sirupsen/logrus"
+  packages = ["."]
+  pruneopts = "UT"
+  revision = "bcd833dfe83d3cebad139e4a29ed79cb2318bf95"
+  version = "v1.2.0"
+
+[[projects]]
+  branch = "master"
+  digest = "1:3f3a05ae0b95893d90b9b3b5afdb79a9b3d96e4e36e099d841ae602e4aca0da8"
+  name = "golang.org/x/crypto"
+  packages = ["ssh/terminal"]
+  pruneopts = "UT"
+  revision = "e4dc69e5b2fd71dcaf8bd5d054eb936deb78d1fa"
+
+[[projects]]
+  branch = "master"
+  digest = "1:6a875550c3b582f6c2d7e2ce44aba792511f00016d7c46b0a4fb26f730ef3058"
+  name = "golang.org/x/sys"
+  packages = [
+    "unix",
+    "windows",
+  ]
+  pruneopts = "UT"
+  revision = "66b7b1311ac80bbafcd2daeef9a5e6e2cd1e2399"
+
+[solve-meta]
+  analyzer-name = "dep"
+  analyzer-version = 1
+  input-imports = ["github.com/sirupsen/logrus"]
+  solver-name = "gps-cdcl"
+  solver-version = 1
diff --git a/Gopkg.toml b/Gopkg.toml
new file mode 100644
index 0000000..d7072c2
--- /dev/null
+++ b/Gopkg.toml
@@ -0,0 +1,30 @@
+# Gopkg.toml example
+#
+# Refer to https://golang.github.io/dep/docs/Gopkg.toml.html
+# for detailed Gopkg.toml documentation.
+#
+# required = ["github.com/user/thing/cmd/thing"]
+# ignored = ["github.com/user/project/pkgX", "bitbucket.org/user/project/pkgA/pkgY"]
+#
+# [[constraint]]
+#   name = "github.com/user/project"
+#   version = "1.0.0"
+#
+# [[constraint]]
+#   name = "github.com/user/project2"
+#   branch = "dev"
+#   source = "github.com/myfork/project2"
+#
+# [[override]]
+#   name = "github.com/x/y"
+#   version = "2.4.0"
+#
+# [prune]
+#   non-go = false
+#   go-tests = true
+#   unused-packages = true
+
+
+[prune]
+  go-tests = true
+  unused-packages = true
diff --git a/bin/lint.sh b/bin/lint.sh
new file mode 100755
index 0000000..6e69381
--- /dev/null
+++ b/bin/lint.sh
@@ -0,0 +1,31 @@
+#!/usr/bin/env bash
+
+gometalinter --install
+
+echo "Checking gometalinter..."
+
+CONCURRENCY=${CONCURRENCY:-8}
+
+gometalinter \
+	--deadline=300s \
+	--concurrency=$CONCURRENCY \
+	--skip=vendor \
+	--exclude="should have comment or be unexported" \
+	./...
+
+if [ $? -eq 1 ]; then
+    exit 1
+fi
+
+EXIT_CODE=0
+
+echo "Checking gofmt..."
+
+for file in `ls |grep -v vendor | xargs -I {} find {} -name "*.go"|xargs -I {} gofmt -l {}`; do
+	echo "need to format $file"
+	EXIT_CODE=1
+done
+
+if [ $EXIT_CODE == 1 ]; then
+  exit 1
+fi
\ No newline at end of file
diff --git a/internal/plugin/calculator/calculator.go b/internal/plugin/calculator/calculator.go
new file mode 100644
index 0000000..92e8dc7
--- /dev/null
+++ b/internal/plugin/calculator/calculator.go
@@ -0,0 +1,50 @@
+package calculator
+
+import (
+	"fmt"
+	"github.com/target/pull-request-code-coverage/internal/plugin/coverage"
+	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
+	"github.com/pkg/errors"
+	"strings"
+)
+
+type Coverage interface {
+	DetermineCoverage(changedLines []domain.SourceLine, coverageReport coverage.Report) ([]domain.SourceLineCoverage, error)
+}
+
+func NewCoverage() *DefaultCoverage {
+	return &DefaultCoverage{}
+}
+
+type DefaultCoverage struct{}
+
+func (*DefaultCoverage) DetermineCoverage(changedLines []domain.SourceLine, coverageReport coverage.Report) ([]domain.SourceLineCoverage, error) {
+	var result []domain.SourceLineCoverage
+
+	for _, sl := range changedLines {
+
+		if sl.Module != coverageReport.Name() {
+			return nil, errors.Errorf("Coverage report %v did not match the module %v", sl.Module, coverageReport.Name())
+		}
+
+		if strings.HasSuffix(sl.FileName, "reporter.go") {
+			fmt.Println(sl.FileName)
+		}
+
+		coverageData, found := coverageReport.GetCoverageData(sl.Module, sl.SrcDir, sl.Pkg, sl.FileName, sl.LineNumber)
+
+		if found {
+			result = append(result, domain.SourceLineCoverage{
+				SourceLine:   sl,
+				CoverageData: *coverageData,
+			})
+		} else {
+			result = append(result, domain.SourceLineCoverage{
+				SourceLine:   sl,
+				CoverageData: domain.CoverageData{},
+			})
+		}
+	}
+
+	return result, nil
+}
diff --git a/internal/plugin/coverage/cobertura/report.go b/internal/plugin/coverage/cobertura/report.go
new file mode 100644
index 0000000..27ed6c3
--- /dev/null
+++ b/internal/plugin/coverage/cobertura/report.go
@@ -0,0 +1,142 @@
+package cobertura
+
+import (
+	"encoding/xml"
+	"github.com/target/pull-request-code-coverage/internal/plugin/coverage"
+	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
+	"io"
+	"io/ioutil"
+	"os"
+	"strings"
+)
+
+type DefaultLoader struct {
+	sourceDir   string
+	readAllFunc func(io.Reader) ([]byte, error)
+}
+
+func NewReportLoader(sourceDir string) *DefaultLoader {
+	return &DefaultLoader{
+		readAllFunc: ioutil.ReadAll,
+		sourceDir:   sourceDir,
+	}
+}
+
+func (l *DefaultLoader) Load(coverageFile string) (coverage.Report, error) {
+	// nolint: gosec
+	//TODO err
+	xmlFile, _ := os.Open(coverageFile)
+
+	//if openFileErr != nil {
+	//	return nil, errors.Wrapf(openFileErr, "Could not open xml file %v", coverageFile)
+	//}
+
+	//TODO err
+	defer xmlFile.Close()
+
+	//TODO err
+	byteValue, _ := l.readAllFunc(xmlFile)
+	//if readAllErr != nil {
+	//	return nil, errors.Wrapf(readAllErr, "Failed reading in all of coverage file %v", coverageFile)
+	//}
+
+	//TODO err
+	var coverageReport Report
+	xml.Unmarshal(byteValue, &coverageReport)
+
+	coverageReport.sourceDir = l.sourceDir
+
+	return &coverageReport, nil
+}
+
+type Report struct {
+	XMLName xml.Name `xml:"coverage"`
+
+	sourceDir        string
+	ReportName       string           `xml:"name,attr"`
+	PackageContainer PackageContainer `xml:"packages"`
+}
+
+func (r *Report) Name() string {
+	return r.ReportName
+}
+
+func (r *Report) GetCoverageData(_ string, srcDir string, pkg string, fileName string, lineNumber int) (*domain.CoverageData, bool) {
+
+	rawDesiredFileNameParts := []string{
+		r.sourceDir, srcDir, pkg, fileName,
+	}
+
+	desiredFileNameParts := []string{}
+	for _, part := range rawDesiredFileNameParts {
+		if len(part) > 0 {
+			desiredFileNameParts = append(desiredFileNameParts, part)
+		}
+	}
+
+	desiredFileName := strings.Join(desiredFileNameParts, "/")
+
+	for _, p := range r.PackageContainer.Packages {
+
+		for _, c := range p.ClassesContainer.Classes {
+			if c.Filename == desiredFileName {
+				for _, l := range c.LinesContainer.Lines {
+					if l.Number == lineNumber {
+						if l.Hits > 0 {
+							return &domain.CoverageData{
+								MissedInstructionCount:  0,
+								CoveredInstructionCount: 1,
+							}, true
+						} else {
+							return &domain.CoverageData{
+								MissedInstructionCount:  1,
+								CoveredInstructionCount: 0,
+							}, true
+						}
+					}
+				}
+			}
+		}
+	}
+
+	return nil, false
+}
+
+type PackageContainer struct {
+	XMLName xml.Name `xml:"packages"`
+
+	Packages []Package `xml:"package"`
+}
+
+type Package struct {
+	XMLName xml.Name `xml:"package"`
+
+	Name             string           `xml:"name,attr"`
+	ClassesContainer ClassesContainer `xml:"classes"`
+}
+
+type ClassesContainer struct {
+	XMLName xml.Name `xml:"classes"`
+
+	Classes []Class `xml:"class"`
+}
+
+type Class struct {
+	XMLName xml.Name `xml:"class"`
+
+	Filename       string         `xml:"filename,attr"`
+	LinesContainer LinesContainer `xml:"lines"`
+}
+
+type LinesContainer struct {
+	XMLName xml.Name `xml:"lines"`
+
+	Lines []Line `xml:"line"`
+}
+
+type Line struct {
+	XMLName xml.Name `xml:"line"`
+
+	Number int `xml:"number,attr"`
+	Hits   int `xml:"hits,attr"`
+}
diff --git a/internal/plugin/coverage/jacoco/report.go b/internal/plugin/coverage/jacoco/report.go
new file mode 100644
index 0000000..33604dc
--- /dev/null
+++ b/internal/plugin/coverage/jacoco/report.go
@@ -0,0 +1,126 @@
+package jacoco
+
+import (
+	"encoding/xml"
+	"github.com/target/pull-request-code-coverage/internal/plugin/coverage"
+	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
+	"github.com/pkg/errors"
+	"io"
+	"io/ioutil"
+	"log"
+	"os"
+)
+
+type DefaultLoader struct {
+	readAllFunc func(io.Reader) ([]byte, error)
+}
+
+func NewReportLoader() *DefaultLoader {
+	return &DefaultLoader{
+		readAllFunc: ioutil.ReadAll,
+	}
+}
+
+func (l *DefaultLoader) Load(coverageFile string) (coverage.Report, error) {
+	// nolint: gosec
+	xmlFile, openFileErr := os.Open(coverageFile)
+
+	if openFileErr != nil {
+		return nil, errors.Wrapf(openFileErr, "Could not open xml file %v", coverageFile)
+	}
+
+	defer silentlyCall(xmlFile.Close)
+
+	byteValue, readAllErr := l.readAllFunc(xmlFile)
+	if readAllErr != nil {
+		return nil, errors.Wrapf(readAllErr, "Failed reading in all of coverage file %v", coverageFile)
+	}
+
+	var coverageReport Report
+	if err := xml.Unmarshal(byteValue, &coverageReport); err != nil {
+		return nil, errors.Wrapf(err, "Failed unmarshalling coverage file %v", coverageFile)
+	}
+
+	return &coverageReport, nil
+}
+
+func silentlyCall(c func() error) {
+	if err := c(); err != nil {
+		log.Panic(err)
+	}
+}
+
+type Report struct {
+	XMLName xml.Name `xml:"report"`
+
+	ReportName string    `xml:"name,attr"`
+	Packages   []Package `xml:"package"`
+}
+
+func (r *Report) Name() string {
+	return r.ReportName
+}
+
+func (r *Report) GetCoverageData(_ string, _ string, pkg string, fileName string, lineNumber int) (*domain.CoverageData, bool) {
+	for _, p := range r.Packages {
+		if p.RelativeName == pkg {
+			return p.GetCoverageData(fileName, lineNumber)
+		}
+	}
+
+	return nil, false
+}
+
+type Package struct {
+	XMLName xml.Name `xml:"package"`
+
+	RelativeName string       `xml:"name,attr"`
+	SourceFiles  []SourceFile `xml:"sourcefile"`
+}
+
+func (p Package) GetCoverageData(fileName string, lineNumber int) (*domain.CoverageData, bool) {
+	for _, f := range p.SourceFiles {
+		if f.RelativeName == fileName {
+			return f.GetCoverageData(lineNumber)
+		}
+	}
+
+	return nil, false
+}
+
+type SourceFile struct {
+	XMLName xml.Name `xml:"sourcefile"`
+
+	RelativeName string `xml:"name,attr"`
+	Lines        []Line `xml:"line"`
+}
+
+func (f SourceFile) GetCoverageData(lineNumber int) (*domain.CoverageData, bool) {
+	for _, l := range f.Lines {
+		if l.LineNumber == lineNumber {
+			coverageData := l.CoverageData.toDomain()
+			return &coverageData, true
+		}
+	}
+
+	return nil, false
+}
+
+type Line struct {
+	XMLName xml.Name `xml:"line"`
+
+	CoverageData
+	LineNumber int `xml:"nr,attr"`
+}
+
+type CoverageData struct {
+	MissedInstructionCount  int `xml:"mi,attr"`
+	CoveredInstructionCount int `xml:"ci,attr"`
+}
+
+func (data CoverageData) toDomain() domain.CoverageData {
+	return domain.CoverageData{
+		MissedInstructionCount:  data.MissedInstructionCount,
+		CoveredInstructionCount: data.CoveredInstructionCount,
+	}
+}
diff --git a/internal/plugin/coverage/jacoco/report_test.go b/internal/plugin/coverage/jacoco/report_test.go
new file mode 100644
index 0000000..565182f
--- /dev/null
+++ b/internal/plugin/coverage/jacoco/report_test.go
@@ -0,0 +1,26 @@
+package jacoco
+
+import (
+	"github.com/pkg/errors"
+	"github.com/stretchr/testify/assert"
+	"io"
+	"testing"
+)
+
+func Test_silentlyCall(t *testing.T) {
+	assert.Panics(t, func() {
+		silentlyCall(func() error {
+			return errors.New("anuthing")
+		})
+	})
+}
+
+func Test_Load_ReadAllFailes(t *testing.T) {
+	l := NewReportLoader()
+	l.readAllFunc = func(io.Reader) ([]byte, error) {
+		return nil, errors.New("anything")
+	}
+
+	_, e := l.Load("../../../test/jacocoTestReport.xml")
+	assert.EqualError(t, e, "Failed reading in all of coverage file ../../../test/jacocoTestReport.xml: anything")
+}
diff --git a/internal/plugin/coverage/report.go b/internal/plugin/coverage/report.go
new file mode 100644
index 0000000..4bdfea9
--- /dev/null
+++ b/internal/plugin/coverage/report.go
@@ -0,0 +1,12 @@
+package coverage
+
+import "github.com/target/pull-request-code-coverage/internal/plugin/domain"
+
+type Loader interface {
+	Load(coverageFile string) (Report, error)
+}
+
+type Report interface {
+	GetCoverageData(module string, sourceDir string, pkg string, fileName string, lineNumber int) (*domain.CoverageData, bool)
+	Name() string
+}
diff --git a/internal/plugin/domain/domain.go b/internal/plugin/domain/domain.go
new file mode 100644
index 0000000..335cafd
--- /dev/null
+++ b/internal/plugin/domain/domain.go
@@ -0,0 +1,70 @@
+package domain
+
+type SourceLineCoverageReport []SourceLineCoverage
+
+func (r SourceLineCoverageReport) TotalLinesWithData() int {
+	result := 0
+
+	for _, l := range r {
+		if l.HasData() {
+			result++
+		}
+	}
+
+	return result
+}
+
+func (r SourceLineCoverageReport) TotalLinesWithoutData() int {
+	result := 0
+
+	for _, l := range r {
+		if !l.HasData() {
+			result++
+		}
+	}
+
+	return result
+}
+
+func (r SourceLineCoverageReport) TotalCoveredInstructions() int {
+	result := 0
+
+	for _, l := range r {
+		result += l.CoveredInstructionCount
+	}
+
+	return result
+}
+
+func (r SourceLineCoverageReport) TotalMissedInstructions() int {
+	result := 0
+
+	for _, l := range r {
+		result += l.MissedInstructionCount
+	}
+
+	return result
+}
+
+type SourceLineCoverage struct {
+	SourceLine
+	CoverageData
+}
+
+func (slc SourceLineCoverage) HasData() bool {
+	return (slc.MissedInstructionCount + slc.CoveredInstructionCount) > 0
+}
+
+type CoverageData struct {
+	MissedInstructionCount  int
+	CoveredInstructionCount int
+}
+
+type SourceLine struct {
+	Module     string
+	SrcDir     string
+	Pkg        string
+	FileName   string
+	LineNumber int
+	LineValue  string
+}
diff --git a/internal/plugin/reporter/reporter.go b/internal/plugin/reporter/reporter.go
new file mode 100644
index 0000000..bfa7f8c
--- /dev/null
+++ b/internal/plugin/reporter/reporter.go
@@ -0,0 +1,71 @@
+package reporter
+
+import (
+	"fmt"
+	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
+	"io"
+	"log"
+)
+
+type Reporter interface {
+	Write(domain.SourceLineCoverageReport)
+}
+
+type Simple struct {
+	Out         io.Writer
+	WritingFunc func(io.Writer, string, ...interface{}) (int, error)
+}
+
+func NewSimple(out io.Writer) *Simple {
+	return &Simple{
+		Out:         out,
+		WritingFunc: fmt.Fprintf,
+	}
+}
+
+func (s *Simple) Write(changedLinesWithCoverage domain.SourceLineCoverageReport) {
+	s.printf("Missed Instructions:\n")
+	for _, r := range changedLinesWithCoverage {
+		if r.MissedInstructionCount > 0 {
+			s.printf("--- %v\n", s.lineDescription(r.SourceLine))
+			s.printf("%v\n", r.LineValue)
+		}
+	}
+
+	linesWithDataCount := changedLinesWithCoverage.TotalLinesWithData()
+	linesWithoutDataCount := changedLinesWithCoverage.TotalLinesWithoutData()
+	totalLines := linesWithDataCount + linesWithoutDataCount
+
+	covered := changedLinesWithCoverage.TotalCoveredInstructions()
+	missed := changedLinesWithCoverage.TotalMissedInstructions()
+	totalInstructions := covered + missed
+
+	s.printf("\n")
+	s.printf("Summary:\n")
+	s.printf("Lines Without Coverage Data -> %.f%% (%d)\n", toPercent(safeDiv(float32(linesWithoutDataCount), float32(totalLines), 0)), linesWithoutDataCount)
+	s.printf("Lines With Coverage Data    -> %.f%% (%d)\n", toPercent(safeDiv(float32(linesWithDataCount), float32(totalLines), 1)), linesWithDataCount)
+	s.printf("Covered Instructions        -> %.f%% (%d)\n", toPercent(safeDiv(float32(covered), float32(totalInstructions), 1)), covered)
+	s.printf("Missed Instructions         -> %.f%% (%d)\n", toPercent(safeDiv(float32(missed), float32(totalInstructions), 0)), missed)
+}
+
+func toPercent(decimal float32) float32 {
+	return decimal * float32(100)
+}
+
+func safeDiv(top float32, bottom float32, safeDefault float32) float32 {
+	if bottom == 0 {
+		return safeDefault
+	}
+
+	return top / bottom
+}
+
+func (s *Simple) printf(str string, is ...interface{}) {
+	if _, err := s.WritingFunc(s.Out, str, is...); err != nil {
+		log.Panic(err)
+	}
+}
+
+func (s *Simple) lineDescription(l domain.SourceLine) string {
+	return fmt.Sprintf("%v/%v/%v/%v:%v", l.Module, l.SrcDir, l.Pkg, l.FileName, l.LineNumber)
+}
diff --git a/internal/plugin/reporter/reporter_test.go b/internal/plugin/reporter/reporter_test.go
new file mode 100644
index 0000000..45fc3a1
--- /dev/null
+++ b/internal/plugin/reporter/reporter_test.go
@@ -0,0 +1,19 @@
+package reporter
+
+import (
+	"github.com/pkg/errors"
+	"github.com/stretchr/testify/assert"
+	"io"
+	"os"
+	"testing"
+)
+
+func TestSimple_printf_willPanicOnWritingErrors(t *testing.T) {
+	s := NewSimple(os.Stdout)
+
+	s.WritingFunc = func(io.Writer, string, ...interface{}) (int, error) {
+		return 0, errors.New("anything")
+	}
+
+	assert.Panics(t, func() { s.printf("anything") })
+}
diff --git a/internal/plugin/runner.go b/internal/plugin/runner.go
new file mode 100644
index 0000000..424f410
--- /dev/null
+++ b/internal/plugin/runner.go
@@ -0,0 +1,80 @@
+package plugin
+
+import (
+	"github.com/target/pull-request-code-coverage/internal/plugin/calculator"
+	"github.com/target/pull-request-code-coverage/internal/plugin/coverage"
+	"github.com/target/pull-request-code-coverage/internal/plugin/coverage/cobertura"
+	"github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco"
+	"github.com/target/pull-request-code-coverage/internal/plugin/reporter"
+	"github.com/target/pull-request-code-coverage/internal/plugin/sourcelines/unifieddiff"
+	"github.com/pkg/errors"
+	"github.com/sirupsen/logrus"
+	"io"
+	"strconv"
+)
+
+type DefaultRunner struct{}
+
+func NewRunner() *DefaultRunner {
+	return &DefaultRunner{}
+}
+
+func (*DefaultRunner) Run(propertyGetter func(string) (string, bool), changedSourceLinesSource io.Reader, reportDefaultOut io.Writer) error {
+
+	coverageFile, found := propertyGetter("PLUGIN_COVERAGE_FILE")
+	if !found {
+		return errors.New("Missing property PLUGIN_COVERAGE_FILE")
+	}
+
+	////TODO !found
+	coverageType, found := propertyGetter("PLUGIN_COVERAGE_TYPE")
+	if !found {
+		return errors.New("Missing property PLUGIN_COVERAGE_TYPE")
+	}
+
+	sourceDir, found := propertyGetter("PLUGIN_SOURCE_DIR")
+	if !found {
+		return errors.New("Missing property PLUGIN_SOURCE_DIR")
+	}
+
+	firstNodeIsModule := false
+	rawFirstNodeIsModule, found := propertyGetter("PLUGIN_DIFF_FIRST_NODE_IS_MODULE")
+	if found {
+		if b, err := strconv.ParseBool(rawFirstNodeIsModule); err == nil {
+			firstNodeIsModule = b
+		} else {
+			logrus.WithField("raw", rawFirstNodeIsModule).Info("PLUGIN_DIFF_FIRST_NODE_IS_MODULE was not a bool, defaulting to false")
+		}
+	} else {
+		logrus.Info("PLUGIN_DIFF_FIRST_NODE_IS_MODULE was missing defaulting to false")
+	}
+
+	coverageReport, loadCoverageErr := GetCoverageReportLoader(coverageType, sourceDir).Load(coverageFile)
+	if loadCoverageErr != nil {
+		return errors.Wrap(loadCoverageErr, "Failed loading coverage report")
+	}
+
+	changedLines, changedLinesErr := unifieddiff.NewChangedSourceLinesLoader(firstNodeIsModule, sourceDir).Load(changedSourceLinesSource)
+	if changedLinesErr != nil {
+		return errors.Wrap(changedLinesErr, "Failed loading changed lines")
+	}
+
+	changedLinesWithCoverage, determineCoverageErr := calculator.NewCoverage().DetermineCoverage(changedLines, coverageReport)
+	if determineCoverageErr != nil {
+		return errors.Wrap(determineCoverageErr, "Failed determining overall coverage for changed lines")
+	}
+
+	reporter.NewSimple(reportDefaultOut).Write(changedLinesWithCoverage)
+
+	return nil
+}
+
+func GetCoverageReportLoader(coverageType string, sourceDir string) coverage.Loader {
+	switch coverageType {
+	case "cobertura":
+		return cobertura.NewReportLoader(sourceDir)
+	default:
+		return jacoco.NewReportLoader()
+	}
+
+}
diff --git a/internal/plugin/runner_test.go b/internal/plugin/runner_test.go
new file mode 100644
index 0000000..16eec8d
--- /dev/null
+++ b/internal/plugin/runner_test.go
@@ -0,0 +1,316 @@
+package plugin
+
+import (
+	"bytes"
+	"github.com/target/pull-request-code-coverage/internal/test/mocks"
+	"github.com/stretchr/testify/assert"
+	"os"
+	"strconv"
+	"testing"
+)
+
+func TestDefaultRunner_RunNotFoundProps(t *testing.T) {
+
+	tts := []struct {
+		foundProps   map[string]string
+		missingProps []string
+		expectedMsg  string
+	}{
+		{
+			foundProps: map[string]string{},
+			missingProps: []string{
+				"PLUGIN_COVERAGE_FILE",
+			},
+			expectedMsg: "Missing property PLUGIN_COVERAGE_FILE",
+		},
+		{
+			foundProps: map[string]string{
+				"PLUGIN_COVERAGE_FILE": "abc",
+			},
+			missingProps: []string{
+				"PLUGIN_COVERAGE_TYPE",
+			},
+			expectedMsg: "Missing property PLUGIN_COVERAGE_TYPE",
+		},
+		{
+			foundProps: map[string]string{
+				"PLUGIN_COVERAGE_FILE": "abc",
+				"PLUGIN_COVERAGE_TYPE": "jacoco",
+			},
+			missingProps: []string{
+				"PLUGIN_SOURCE_DIR",
+			},
+			expectedMsg: "Missing property PLUGIN_SOURCE_DIR",
+		},
+	}
+
+	for idx, tt := range tts {
+		t.Run(strconv.Itoa(idx), func(t *testing.T) {
+			propGetter := mocks.NewMockPropertyGetter()
+
+			for p, v := range tt.foundProps {
+				propGetter.On("GetProperty", p).Return(v, true)
+			}
+
+			for _, p := range tt.missingProps {
+				propGetter.On("GetProperty", p).Return("fff", false)
+			}
+
+			err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/sample_unified.diff"), os.Stdout)
+			assert.EqualError(t, err, tt.expectedMsg)
+
+			propGetter.AssertExpectations(t)
+		})
+	}
+}
+
+func searchoss(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/example_go_coverage.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("cobertura", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("false", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("/go/github.com/target/pull-request-code-coverage", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/example_go_unified.diff"), &buf)
+	assert.NoError(t, err)
+
+	assert.Equal(t, `Missed Instructions:
+--- category-search/src/main/java/com/tgt/CategorySearchApplication.java:52
+   System.out.print("Something");
+
+Summary:
+Lines Without Coverage Data -> 78% (7)
+Lines With Coverage Data    -> 22% (2)
+Covered Instructions        -> 73% (8)
+Missed Instructions         -> 27% (3)
+`, buf.String())
+
+	propGetter.AssertExpectations(t)
+}
+
+
+func TestDefaultRunner_Run(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/sample_unified.diff"), &buf)
+	assert.NoError(t, err)
+
+	assert.Equal(t, `Missed Instructions:
+--- category-search/src/main/java/com/tgt/CategorySearchApplication.java:52
+    System.out.print("Something");
+
+Summary:
+Lines Without Coverage Data -> 78% (7)
+Lines With Coverage Data    -> 22% (2)
+Covered Instructions        -> 73% (8)
+Missed Instructions         -> 27% (3)
+`, buf.String())
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunNoCoverageData(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestEmptyReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/sample_unified.diff"), &buf)
+	assert.NoError(t, err)
+
+	assert.Equal(t, `Missed Instructions:
+
+Summary:
+Lines Without Coverage Data -> 100% (9)
+Lines With Coverage Data    -> 0% (0)
+Covered Instructions        -> 100% (0)
+Missed Instructions         -> 0% (0)
+`, buf.String())
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunFirstNodeIsNotModule(t *testing.T) {
+
+	tts := []struct {
+		rawPluginDiffFirstNodeIsModule   string
+		foundPluginDiffFirstNodeIsModule bool
+	}{
+		{
+			rawPluginDiffFirstNodeIsModule:   "",
+			foundPluginDiffFirstNodeIsModule: false,
+		},
+		{
+			rawPluginDiffFirstNodeIsModule:   "abc",
+			foundPluginDiffFirstNodeIsModule: true,
+		},
+	}
+
+	for idx, tt := range tts {
+		t.Run(strconv.Itoa(idx), func(t *testing.T) {
+			propGetter := mocks.NewMockPropertyGetter()
+
+			propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+			propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return(tt.rawPluginDiffFirstNodeIsModule, tt.foundPluginDiffFirstNodeIsModule)
+			propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+			propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+			var buf bytes.Buffer
+
+			err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/sample_unified.diff"), &buf)
+			assert.EqualError(t, err, "Failed determining overall coverage for changed lines: Coverage report  did not match the module category-search")
+
+			propGetter.AssertExpectations(t)
+		})
+	}
+}
+
+func MustOpen(t *testing.T, filename string) *os.File {
+	f, err := os.Open(filename)
+
+	if !assert.NoError(t, err) {
+		t.FailNow()
+	}
+
+	return f
+}
+
+func TestDefaultRunner_RunErrOpeningCoverFile(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/blahblah.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("anything", true)
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/sample_unified.diff"), os.Stdout)
+	assert.EqualError(t, err, "Failed loading coverage report: Could not open xml file ../test/blahblah.xml: open ../test/blahblah.xml: no such file or directory")
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunBadUnified_UnfinishedBlock(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/unfinished_block_sample_unified.diff"), &buf)
+	assert.EqualError(t, err, "Failed loading changed lines: Was not able to finish previous block category-search  test.something 1 1 2 +++ /dev/null")
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunBadUnified_UnfinishedBlock2(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/unfinished_block_2_sample_unified.diff"), &buf)
+	assert.EqualError(t, err, "Failed loading changed lines: Was not able to finish previous block category-search  test.something 1 1 2 @@ -1,3 +0,0 @@")
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunBadUnified_BadFilename(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/badfilename_sample_unified.diff"), &buf)
+	assert.EqualError(t, err, "Failed loading changed lines: Filename test.something is invalid with firstNodeIsModule true")
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunBadUnified_ExtraLinesBlock(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/extralines_block_sample_unified.diff"), &buf)
+	assert.EqualError(t, err, "Failed loading changed lines: Finished previous block early category-search  test.something 1 3 0 +extra")
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunBadUnified_AlphaInAtBlock(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/bad_at_nums_sample_unified.diff"), &buf)
+	assert.EqualError(t, err, "Failed loading changed lines: Invalid line offset in line @@ -0,0 +a,3 @@: strconv.Atoi: parsing \"a\": invalid syntax")
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunBadUnified_AlphaInAtBlock2(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.xml", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/bad_at_nums_2_sample_unified.diff"), &buf)
+	assert.EqualError(t, err, "Failed loading changed lines: Invalid line offset in line @@ -0,0 +1,a @@: strconv.Atoi: parsing \"a\": invalid syntax")
+
+	propGetter.AssertExpectations(t)
+}
+
+func TestDefaultRunner_RunCoverageNotXml(t *testing.T) {
+	propGetter := mocks.NewMockPropertyGetter()
+
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_FILE").Return("../test/jacocoTestReport.json", true)
+	propGetter.On("GetProperty", "PLUGIN_DIFF_FIRST_NODE_IS_MODULE").Return("true", true)
+	propGetter.On("GetProperty", "PLUGIN_COVERAGE_TYPE").Return("jacoco", true)
+	propGetter.On("GetProperty", "PLUGIN_SOURCE_DIR").Return("src/main/java", true)
+
+	var buf bytes.Buffer
+
+	err := NewRunner().Run(propGetter.GetProperty, MustOpen(t, "../test/sample_unified.diff"), &buf)
+	assert.EqualError(t, err, "Failed loading coverage report: Failed unmarshalling coverage file ../test/jacocoTestReport.json: EOF")
+
+	propGetter.AssertExpectations(t)
+}
diff --git a/internal/plugin/sourcelines/loader.go b/internal/plugin/sourcelines/loader.go
new file mode 100644
index 0000000..2b5b9c4
--- /dev/null
+++ b/internal/plugin/sourcelines/loader.go
@@ -0,0 +1,10 @@
+package sourcelines
+
+import (
+	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
+	"os"
+)
+
+type Loader interface {
+	Load(inFile *os.File) ([]domain.SourceLine, error)
+}
diff --git a/internal/plugin/sourcelines/unifieddiff/changed_source_loader.go b/internal/plugin/sourcelines/unifieddiff/changed_source_loader.go
new file mode 100644
index 0000000..720c2d3
--- /dev/null
+++ b/internal/plugin/sourcelines/unifieddiff/changed_source_loader.go
@@ -0,0 +1,146 @@
+package unifieddiff
+
+import (
+	"bufio"
+	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
+	"github.com/pkg/errors"
+	"io"
+	"regexp"
+	"strconv"
+	"strings"
+)
+
+type Loader struct {
+	FirstPathNodeIsModule bool
+	SourceDir             string
+}
+
+func NewChangedSourceLinesLoader(FirstPathNodeIsModule bool, SourceDir string) *Loader {
+	return &Loader{
+		FirstPathNodeIsModule: FirstPathNodeIsModule,
+		SourceDir:             SourceDir,
+	}
+}
+
+func (l *Loader) Load(inReader io.Reader) ([]domain.SourceLine, error) {
+
+	scanner := bufio.NewScanner(inReader)
+
+	lines := []string{}
+	for scanner.Scan() {
+		lines = append(lines, scanner.Text())
+	}
+
+	return getChangedLinesFromUnifiedDiff(lines, l.FirstPathNodeIsModule, l.SourceDir)
+}
+
+var changedFileLine = regexp.MustCompile("^[+][+][+][ ]b?[/](.*)")
+var changedLineCounts = regexp.MustCompile("^[@][@][ ][-].*?[ ][+](.*?)[ ][@][@].*")
+var addedLine = regexp.MustCompile("^[+].*")
+var emptyStr = ""
+
+// nolint: gocyclo
+func getChangedLinesFromUnifiedDiff(unifiedDiffLines []string, firstNodeIsModule bool, sourceDir string) ([]domain.SourceLine, error) {
+
+	result := []domain.SourceLine{}
+
+	var currentModule *string
+	var currentSourceDir *string
+	var currentPkg *string
+	var currentFilename *string
+	currentLineOffset := -1
+	currentRelativeLine := 0
+	linesLeftInBlock := -1
+
+	for _, line := range unifiedDiffLines {
+		if matches := changedFileLine.FindStringSubmatch(line); len(matches) > 0 {
+
+			if linesLeftInBlock > 0 {
+				return nil, errors.Errorf("Was not able to finish previous block %v %v %v %v %v %v %v", *currentModule, *currentPkg, *currentFilename, currentLineOffset, currentRelativeLine, linesLeftInBlock, line)
+			}
+
+			currentModule = &emptyStr
+			workingPkg := emptyStr
+			currentFilename = &(matches[1])
+			currentSourceDir = &emptyStr
+
+			fileNameParts := strings.Split(*currentFilename, "/")
+
+			if firstNodeIsModule {
+
+				if len(fileNameParts) < 2 {
+					return nil, errors.Errorf("Filename %v is invalid with firstNodeIsModule %v", *currentFilename, firstNodeIsModule)
+				}
+
+				currentModule = &(fileNameParts[0])
+				fileNameParts = fileNameParts[1:]
+			}
+
+			if len(fileNameParts) == 1 {
+				currentFilename = &(fileNameParts[0])
+			} else {
+				pkg := strings.Join(fileNameParts[:len(fileNameParts)-1], "/")
+				workingPkg = pkg
+				currentFilename = &(fileNameParts[len(fileNameParts)-1])
+			}
+
+			if strings.HasPrefix(workingPkg, sourceDir+"/") {
+				sourceDirLessPkg := workingPkg[len(sourceDir+"/"):]
+				currentPkg = &sourceDirLessPkg
+				currentSourceDir = &sourceDir
+			} else {
+				currentPkg = &workingPkg
+			}
+
+			currentLineOffset = -1
+			currentRelativeLine = 0
+			linesLeftInBlock = -1
+		} else if matches := changedLineCounts.FindStringSubmatch(line); len(matches) > 0 {
+
+			if linesLeftInBlock > 0 {
+				return nil, errors.Errorf("Was not able to finish previous block %v %v %v %v %v %v %v", *currentModule, *currentPkg, *currentFilename, currentLineOffset, currentRelativeLine, linesLeftInBlock, line)
+			}
+
+			rawLineOffsetData := matches[1]
+			rawLineOffsetDatas := strings.Split(rawLineOffsetData, ",")
+
+			var currentLineOffsetErr error
+			currentLineOffset, currentLineOffsetErr = strconv.Atoi(rawLineOffsetDatas[0])
+			if currentLineOffsetErr != nil {
+				return nil, errors.Wrapf(currentLineOffsetErr, "Invalid line offset in line %v", line)
+			}
+
+			currentRelativeLine = 0
+
+			if len(rawLineOffsetDatas) > 1 {
+				var linesLeftInBlockErr error
+				linesLeftInBlock, linesLeftInBlockErr = strconv.Atoi(rawLineOffsetDatas[1])
+				if linesLeftInBlockErr != nil {
+					return nil, errors.Wrapf(linesLeftInBlockErr, "Invalid line offset in line %v", line)
+				}
+			} else {
+				linesLeftInBlock = 1
+			}
+
+		} else if addedLine.MatchString(line) {
+
+			if linesLeftInBlock <= 0 {
+				return nil, errors.Errorf("Finished previous block early %v %v %v %v %v %v %v", *currentModule, *currentPkg, *currentFilename, currentLineOffset, currentRelativeLine, linesLeftInBlock, line)
+			}
+
+			result = append(result, domain.SourceLine{
+				LineValue:  line[1:],
+				LineNumber: currentLineOffset + currentRelativeLine,
+				FileName:   *currentFilename,
+				Pkg:        *currentPkg,
+				SrcDir:     *currentSourceDir,
+				Module:     *currentModule,
+			})
+
+			currentRelativeLine++
+			linesLeftInBlock--
+		}
+	}
+
+	return result, nil
+}
diff --git a/internal/test/bad_at_nums_2_sample_unified.diff b/internal/test/bad_at_nums_2_sample_unified.diff
new file mode 100644
index 0000000..c3962f6
--- /dev/null
+++ b/internal/test/bad_at_nums_2_sample_unified.diff
@@ -0,0 +1,6 @@
+diff --git a/category-search/test.something b/category-search/test.something
+new file mode 100644
+index 0000000..d5418b3
+--- /dev/null
++++ b/category-search/test.something
+@@ -0,0 +1,a @@
\ No newline at end of file
diff --git a/internal/test/bad_at_nums_sample_unified.diff b/internal/test/bad_at_nums_sample_unified.diff
new file mode 100644
index 0000000..c7e2d9d
--- /dev/null
+++ b/internal/test/bad_at_nums_sample_unified.diff
@@ -0,0 +1,6 @@
+diff --git a/category-search/test.something b/category-search/test.something
+new file mode 100644
+index 0000000..d5418b3
+--- /dev/null
++++ b/category-search/test.something
+@@ -0,0 +a,3 @@
\ No newline at end of file
diff --git a/internal/test/badfilename_sample_unified.diff b/internal/test/badfilename_sample_unified.diff
new file mode 100644
index 0000000..02a1242
--- /dev/null
+++ b/internal/test/badfilename_sample_unified.diff
@@ -0,0 +1,7 @@
+diff --git a/category-search/test.something b/category-search/test.something
+new file mode 100644
+index 0000000..d5418b3
+--- /dev/null
++++ b/test.something
+@@ -0,0 +1,3 @@
++hello
diff --git a/internal/test/example_go_coverage.xml b/internal/test/example_go_coverage.xml
new file mode 100644
index 0000000..6628bc3
--- /dev/null
+++ b/internal/test/example_go_coverage.xml
@@ -0,0 +1,664 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE coverage SYSTEM "http://cobertura.sourceforge.net/xml/coverage-04.dtd">
+<coverage line-rate="0.9619565" branch-rate="0" lines-covered="177" lines-valid="184" branches-covered="0" branches-valid="0" complexity="0" version="" timestamp="1541793228625">
+	<packages>
+		<package name="github.com/target/pull-request-code-coverage" line-rate="0" branch-rate="0" complexity="0" line-count="4" line-hits="0">
+			<classes>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/main.go" line-rate="0" branch-rate="0" complexity="0" line-count="4" line-hits="0">
+					<methods>
+						<method name="main" signature="" line-rate="0" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="10" hits="0"></line>
+								<line number="12" hits="0"></line>
+								<line number="13" hits="0"></line>
+								<line number="17" hits="0"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="10" hits="0"></line>
+						<line number="12" hits="0"></line>
+						<line number="13" hits="0"></line>
+						<line number="17" hits="0"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/plugin" line-rate="0.96428573" branch-rate="0" complexity="0" line-count="28" line-hits="27">
+			<classes>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/runner.go" line-rate="0.75" branch-rate="0" complexity="0" line-count="4" line-hits="3">
+					<methods>
+						<method name="NewRunner" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="19" hits="1"></line>
+							</lines>
+						</method>
+						<method name="GetCoverageReportLoader" signature="" line-rate="0.6666667" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="70" hits="1"></line>
+								<line number="72" hits="0"></line>
+								<line number="74" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="19" hits="1"></line>
+						<line number="70" hits="1"></line>
+						<line number="72" hits="0"></line>
+						<line number="74" hits="1"></line>
+					</lines>
+				</class>
+				<class name="DefaultRunner" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/runner.go" line-rate="1" branch-rate="0" complexity="0" line-count="24" line-hits="24">
+					<methods>
+						<method name="Run" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="24" hits="1"></line>
+								<line number="25" hits="1"></line>
+								<line number="26" hits="1"></line>
+								<line number="32" hits="1"></line>
+								<line number="33" hits="1"></line>
+								<line number="34" hits="1"></line>
+								<line number="37" hits="1"></line>
+								<line number="38" hits="1"></line>
+								<line number="39" hits="1"></line>
+								<line number="40" hits="1"></line>
+								<line number="41" hits="1"></line>
+								<line number="43" hits="1"></line>
+								<line number="46" hits="1"></line>
+								<line number="49" hits="1"></line>
+								<line number="50" hits="1"></line>
+								<line number="51" hits="1"></line>
+								<line number="54" hits="1"></line>
+								<line number="55" hits="1"></line>
+								<line number="56" hits="1"></line>
+								<line number="59" hits="1"></line>
+								<line number="60" hits="1"></line>
+								<line number="61" hits="1"></line>
+								<line number="64" hits="1"></line>
+								<line number="66" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="24" hits="1"></line>
+						<line number="25" hits="1"></line>
+						<line number="26" hits="1"></line>
+						<line number="32" hits="1"></line>
+						<line number="33" hits="1"></line>
+						<line number="34" hits="1"></line>
+						<line number="37" hits="1"></line>
+						<line number="38" hits="1"></line>
+						<line number="39" hits="1"></line>
+						<line number="40" hits="1"></line>
+						<line number="41" hits="1"></line>
+						<line number="43" hits="1"></line>
+						<line number="46" hits="1"></line>
+						<line number="49" hits="1"></line>
+						<line number="50" hits="1"></line>
+						<line number="51" hits="1"></line>
+						<line number="54" hits="1"></line>
+						<line number="55" hits="1"></line>
+						<line number="56" hits="1"></line>
+						<line number="59" hits="1"></line>
+						<line number="60" hits="1"></line>
+						<line number="61" hits="1"></line>
+						<line number="64" hits="1"></line>
+						<line number="66" hits="1"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/plugin/calculator" line-rate="1" branch-rate="0" complexity="0" line-count="10" line-hits="10">
+			<classes>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/calculator/calculator.go" line-rate="1" branch-rate="0" complexity="0" line-count="1" line-hits="1">
+					<methods>
+						<method name="NewCoverage" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="14" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="14" hits="1"></line>
+					</lines>
+				</class>
+				<class name="DefaultCoverage" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/calculator/calculator.go" line-rate="1" branch-rate="0" complexity="0" line-count="9" line-hits="9">
+					<methods>
+						<method name="DetermineCoverage" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="20" hits="1"></line>
+								<line number="22" hits="1"></line>
+								<line number="24" hits="1"></line>
+								<line number="25" hits="1"></line>
+								<line number="28" hits="1"></line>
+								<line number="30" hits="1"></line>
+								<line number="31" hits="1"></line>
+								<line number="36" hits="1"></line>
+								<line number="43" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="20" hits="1"></line>
+						<line number="22" hits="1"></line>
+						<line number="24" hits="1"></line>
+						<line number="25" hits="1"></line>
+						<line number="28" hits="1"></line>
+						<line number="30" hits="1"></line>
+						<line number="31" hits="1"></line>
+						<line number="36" hits="1"></line>
+						<line number="43" hits="1"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/plugin/coverage/golang" line-rate="0" branch-rate="0" complexity="0" line-count="2" line-hits="0">
+			<classes>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/golang/report.go" line-rate="0" branch-rate="0" complexity="0" line-count="1" line-hits="0">
+					<methods>
+						<method name="NewReportLoader" signature="" line-rate="0" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="14" hits="0"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="14" hits="0"></line>
+					</lines>
+				</class>
+				<class name="DefaultLoader" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/golang/report.go" line-rate="0" branch-rate="0" complexity="0" line-count="1" line-hits="0">
+					<methods>
+						<method name="Load" signature="" line-rate="0" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="20" hits="0"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="20" hits="0"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco" line-rate="1" branch-rate="0" complexity="0" line-count="29" line-hits="29">
+			<classes>
+				<class name="DefaultLoader" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco/report.go" line-rate="1" branch-rate="0" complexity="0" line-count="11" line-hits="11">
+					<methods>
+						<method name="Load" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="33" hits="1"></line>
+								<line number="35" hits="1"></line>
+								<line number="36" hits="1"></line>
+								<line number="39" hits="1"></line>
+								<line number="41" hits="1"></line>
+								<line number="42" hits="1"></line>
+								<line number="43" hits="1"></line>
+								<line number="46" hits="1"></line>
+								<line number="47" hits="1"></line>
+								<line number="48" hits="1"></line>
+								<line number="51" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="33" hits="1"></line>
+						<line number="35" hits="1"></line>
+						<line number="36" hits="1"></line>
+						<line number="39" hits="1"></line>
+						<line number="41" hits="1"></line>
+						<line number="42" hits="1"></line>
+						<line number="43" hits="1"></line>
+						<line number="46" hits="1"></line>
+						<line number="47" hits="1"></line>
+						<line number="48" hits="1"></line>
+						<line number="51" hits="1"></line>
+					</lines>
+				</class>
+				<class name="Report" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco/report.go" line-rate="1" branch-rate="0" complexity="0" line-count="5" line-hits="5">
+					<methods>
+						<method name="Name" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="61" hits="1"></line>
+							</lines>
+						</method>
+						<method name="GetCoverageData" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="65" hits="1"></line>
+								<line number="66" hits="1"></line>
+								<line number="67" hits="1"></line>
+								<line number="71" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="61" hits="1"></line>
+						<line number="65" hits="1"></line>
+						<line number="66" hits="1"></line>
+						<line number="67" hits="1"></line>
+						<line number="71" hits="1"></line>
+					</lines>
+				</class>
+				<class name="Package" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco/report.go" line-rate="1" branch-rate="0" complexity="0" line-count="4" line-hits="4">
+					<methods>
+						<method name="GetCoverageData" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="82" hits="1"></line>
+								<line number="83" hits="1"></line>
+								<line number="84" hits="1"></line>
+								<line number="88" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="82" hits="1"></line>
+						<line number="83" hits="1"></line>
+						<line number="84" hits="1"></line>
+						<line number="88" hits="1"></line>
+					</lines>
+				</class>
+				<class name="SourceFile" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco/report.go" line-rate="1" branch-rate="0" complexity="0" line-count="5" line-hits="5">
+					<methods>
+						<method name="GetCoverageData" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="99" hits="1"></line>
+								<line number="100" hits="1"></line>
+								<line number="101" hits="1"></line>
+								<line number="102" hits="1"></line>
+								<line number="106" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="99" hits="1"></line>
+						<line number="100" hits="1"></line>
+						<line number="101" hits="1"></line>
+						<line number="102" hits="1"></line>
+						<line number="106" hits="1"></line>
+					</lines>
+				</class>
+				<class name="CoverageData" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco/report.go" line-rate="1" branch-rate="0" complexity="0" line-count="1" line-hits="1">
+					<methods>
+						<method name="toDomain" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="122" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="122" hits="1"></line>
+					</lines>
+				</class>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/coverage/jacoco/report.go" line-rate="1" branch-rate="0" complexity="0" line-count="3" line-hits="3">
+					<methods>
+						<method name="NewReportLoader" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="26" hits="1"></line>
+							</lines>
+						</method>
+						<method name="silentlyCall" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="55" hits="1"></line>
+								<line number="56" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="26" hits="1"></line>
+						<line number="55" hits="1"></line>
+						<line number="56" hits="1"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/plugin/domain" line-rate="1" branch-rate="0" complexity="0" line-count="19" line-hits="19">
+			<classes>
+				<class name="SourceLineCoverageReport" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/domain/domain.go" line-rate="1" branch-rate="0" complexity="0" line-count="18" line-hits="18">
+					<methods>
+						<method name="TotalLinesWithData" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="6" hits="1"></line>
+								<line number="8" hits="1"></line>
+								<line number="9" hits="1"></line>
+								<line number="10" hits="1"></line>
+								<line number="14" hits="1"></line>
+							</lines>
+						</method>
+						<method name="TotalLinesWithoutData" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="18" hits="1"></line>
+								<line number="20" hits="1"></line>
+								<line number="21" hits="1"></line>
+								<line number="22" hits="1"></line>
+								<line number="26" hits="1"></line>
+							</lines>
+						</method>
+						<method name="TotalCoveredInstructions" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="30" hits="1"></line>
+								<line number="32" hits="1"></line>
+								<line number="33" hits="1"></line>
+								<line number="36" hits="1"></line>
+							</lines>
+						</method>
+						<method name="TotalMissedInstructions" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="40" hits="1"></line>
+								<line number="42" hits="1"></line>
+								<line number="43" hits="1"></line>
+								<line number="46" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="6" hits="1"></line>
+						<line number="8" hits="1"></line>
+						<line number="9" hits="1"></line>
+						<line number="10" hits="1"></line>
+						<line number="14" hits="1"></line>
+						<line number="18" hits="1"></line>
+						<line number="20" hits="1"></line>
+						<line number="21" hits="1"></line>
+						<line number="22" hits="1"></line>
+						<line number="26" hits="1"></line>
+						<line number="30" hits="1"></line>
+						<line number="32" hits="1"></line>
+						<line number="33" hits="1"></line>
+						<line number="36" hits="1"></line>
+						<line number="40" hits="1"></line>
+						<line number="42" hits="1"></line>
+						<line number="43" hits="1"></line>
+						<line number="46" hits="1"></line>
+					</lines>
+				</class>
+				<class name="SourceLineCoverage" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/domain/domain.go" line-rate="1" branch-rate="0" complexity="0" line-count="1" line-hits="1">
+					<methods>
+						<method name="HasData" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="55" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="55" hits="1"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/plugin/reporter" line-rate="1" branch-rate="0" complexity="0" line-count="25" line-hits="25">
+			<classes>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/reporter/reporter.go" line-rate="1" branch-rate="0" complexity="0" line-count="5" line-hits="5">
+					<methods>
+						<method name="NewSimple" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="20" hits="1"></line>
+							</lines>
+						</method>
+						<method name="toPercent" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="52" hits="1"></line>
+							</lines>
+						</method>
+						<method name="safeDiv" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="56" hits="1"></line>
+								<line number="57" hits="1"></line>
+								<line number="60" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="20" hits="1"></line>
+						<line number="52" hits="1"></line>
+						<line number="56" hits="1"></line>
+						<line number="57" hits="1"></line>
+						<line number="60" hits="1"></line>
+					</lines>
+				</class>
+				<class name="Simple" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/reporter/reporter.go" line-rate="1" branch-rate="0" complexity="0" line-count="20" line-hits="20">
+					<methods>
+						<method name="Write" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="27" hits="1"></line>
+								<line number="28" hits="1"></line>
+								<line number="29" hits="1"></line>
+								<line number="30" hits="1"></line>
+								<line number="31" hits="1"></line>
+								<line number="35" hits="1"></line>
+								<line number="36" hits="1"></line>
+								<line number="37" hits="1"></line>
+								<line number="39" hits="1"></line>
+								<line number="40" hits="1"></line>
+								<line number="41" hits="1"></line>
+								<line number="43" hits="1"></line>
+								<line number="44" hits="1"></line>
+								<line number="45" hits="1"></line>
+								<line number="46" hits="1"></line>
+								<line number="47" hits="1"></line>
+								<line number="48" hits="1"></line>
+							</lines>
+						</method>
+						<method name="printf" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="64" hits="1"></line>
+								<line number="65" hits="1"></line>
+							</lines>
+						</method>
+						<method name="lineDescription" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="70" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="27" hits="1"></line>
+						<line number="28" hits="1"></line>
+						<line number="29" hits="1"></line>
+						<line number="30" hits="1"></line>
+						<line number="31" hits="1"></line>
+						<line number="35" hits="1"></line>
+						<line number="36" hits="1"></line>
+						<line number="37" hits="1"></line>
+						<line number="39" hits="1"></line>
+						<line number="40" hits="1"></line>
+						<line number="41" hits="1"></line>
+						<line number="43" hits="1"></line>
+						<line number="44" hits="1"></line>
+						<line number="45" hits="1"></line>
+						<line number="46" hits="1"></line>
+						<line number="47" hits="1"></line>
+						<line number="48" hits="1"></line>
+						<line number="64" hits="1"></line>
+						<line number="65" hits="1"></line>
+						<line number="70" hits="1"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/plugin/sourcelines/unifieddiff" line-rate="1" branch-rate="0" complexity="0" line-count="64" line-hits="64">
+			<classes>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/sourcelines/unifieddiff/changed_source_loader.go" line-rate="1" branch-rate="0" complexity="0" line-count="59" line-hits="59">
+					<methods>
+						<method name="NewChangedSourceLinesLoader" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="19" hits="1"></line>
+							</lines>
+						</method>
+						<method name="getChangedLinesFromUnifiedDiff" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="45" hits="1"></line>
+								<line number="47" hits="1"></line>
+								<line number="48" hits="1"></line>
+								<line number="49" hits="1"></line>
+								<line number="50" hits="1"></line>
+								<line number="51" hits="1"></line>
+								<line number="52" hits="1"></line>
+								<line number="53" hits="1"></line>
+								<line number="55" hits="1"></line>
+								<line number="56" hits="1"></line>
+								<line number="58" hits="1"></line>
+								<line number="59" hits="1"></line>
+								<line number="62" hits="1"></line>
+								<line number="63" hits="1"></line>
+								<line number="64" hits="1"></line>
+								<line number="65" hits="1"></line>
+								<line number="67" hits="1"></line>
+								<line number="69" hits="1"></line>
+								<line number="71" hits="1"></line>
+								<line number="72" hits="1"></line>
+								<line number="75" hits="1"></line>
+								<line number="76" hits="1"></line>
+								<line number="79" hits="1"></line>
+								<line number="80" hits="1"></line>
+								<line number="82" hits="1"></line>
+								<line number="83" hits="1"></line>
+								<line number="84" hits="1"></line>
+								<line number="87" hits="1"></line>
+								<line number="88" hits="1"></line>
+								<line number="89" hits="1"></line>
+								<line number="90" hits="1"></line>
+								<line number="92" hits="1"></line>
+								<line number="95" hits="1"></line>
+								<line number="96" hits="1"></line>
+								<line number="97" hits="1"></line>
+								<line number="98" hits="1"></line>
+								<line number="100" hits="1"></line>
+								<line number="101" hits="1"></line>
+								<line number="104" hits="1"></line>
+								<line number="105" hits="1"></line>
+								<line number="107" hits="1"></line>
+								<line number="108" hits="1"></line>
+								<line number="109" hits="1"></line>
+								<line number="110" hits="1"></line>
+								<line number="113" hits="1"></line>
+								<line number="115" hits="1"></line>
+								<line number="116" hits="1"></line>
+								<line number="117" hits="1"></line>
+								<line number="118" hits="1"></line>
+								<line number="119" hits="1"></line>
+								<line number="122" hits="1"></line>
+								<line number="125" hits="1"></line>
+								<line number="127" hits="1"></line>
+								<line number="128" hits="1"></line>
+								<line number="131" hits="1"></line>
+								<line number="140" hits="1"></line>
+								<line number="141" hits="1"></line>
+								<line number="145" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="19" hits="1"></line>
+						<line number="45" hits="1"></line>
+						<line number="47" hits="1"></line>
+						<line number="48" hits="1"></line>
+						<line number="49" hits="1"></line>
+						<line number="50" hits="1"></line>
+						<line number="51" hits="1"></line>
+						<line number="52" hits="1"></line>
+						<line number="53" hits="1"></line>
+						<line number="55" hits="1"></line>
+						<line number="56" hits="1"></line>
+						<line number="58" hits="1"></line>
+						<line number="59" hits="1"></line>
+						<line number="62" hits="1"></line>
+						<line number="63" hits="1"></line>
+						<line number="64" hits="1"></line>
+						<line number="65" hits="1"></line>
+						<line number="67" hits="1"></line>
+						<line number="69" hits="1"></line>
+						<line number="71" hits="1"></line>
+						<line number="72" hits="1"></line>
+						<line number="75" hits="1"></line>
+						<line number="76" hits="1"></line>
+						<line number="79" hits="1"></line>
+						<line number="80" hits="1"></line>
+						<line number="82" hits="1"></line>
+						<line number="83" hits="1"></line>
+						<line number="84" hits="1"></line>
+						<line number="87" hits="1"></line>
+						<line number="88" hits="1"></line>
+						<line number="89" hits="1"></line>
+						<line number="90" hits="1"></line>
+						<line number="92" hits="1"></line>
+						<line number="95" hits="1"></line>
+						<line number="96" hits="1"></line>
+						<line number="97" hits="1"></line>
+						<line number="98" hits="1"></line>
+						<line number="100" hits="1"></line>
+						<line number="101" hits="1"></line>
+						<line number="104" hits="1"></line>
+						<line number="105" hits="1"></line>
+						<line number="107" hits="1"></line>
+						<line number="108" hits="1"></line>
+						<line number="109" hits="1"></line>
+						<line number="110" hits="1"></line>
+						<line number="113" hits="1"></line>
+						<line number="115" hits="1"></line>
+						<line number="116" hits="1"></line>
+						<line number="117" hits="1"></line>
+						<line number="118" hits="1"></line>
+						<line number="119" hits="1"></line>
+						<line number="122" hits="1"></line>
+						<line number="125" hits="1"></line>
+						<line number="127" hits="1"></line>
+						<line number="128" hits="1"></line>
+						<line number="131" hits="1"></line>
+						<line number="140" hits="1"></line>
+						<line number="141" hits="1"></line>
+						<line number="145" hits="1"></line>
+					</lines>
+				</class>
+				<class name="Loader" filename="/go/github.com/target/pull-request-code-coverage/internal/plugin/sourcelines/unifieddiff/changed_source_loader.go" line-rate="1" branch-rate="0" complexity="0" line-count="5" line-hits="5">
+					<methods>
+						<method name="Load" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="27" hits="1"></line>
+								<line number="29" hits="1"></line>
+								<line number="30" hits="1"></line>
+								<line number="31" hits="1"></line>
+								<line number="34" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="27" hits="1"></line>
+						<line number="29" hits="1"></line>
+						<line number="30" hits="1"></line>
+						<line number="31" hits="1"></line>
+						<line number="34" hits="1"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+		<package name="github.com/target/pull-request-code-coverage/internal/test/mocks" line-rate="1" branch-rate="0" complexity="0" line-count="3" line-hits="3">
+			<classes>
+				<class name="-" filename="/go/github.com/target/pull-request-code-coverage/internal/test/mocks/property_getter.go" line-rate="1" branch-rate="0" complexity="0" line-count="1" line-hits="1">
+					<methods>
+						<method name="NewMockPropertyGetter" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="10" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="10" hits="1"></line>
+					</lines>
+				</class>
+				<class name="MockPropertyGetter" filename="/go/github.com/target/pull-request-code-coverage/internal/test/mocks/property_getter.go" line-rate="1" branch-rate="0" complexity="0" line-count="2" line-hits="2">
+					<methods>
+						<method name="GetProperty" signature="" line-rate="1" branch-rate="0" complexity="0" line-count="0" line-hits="0">
+							<lines>
+								<line number="14" hits="1"></line>
+								<line number="15" hits="1"></line>
+							</lines>
+						</method>
+					</methods>
+					<lines>
+						<line number="14" hits="1"></line>
+						<line number="15" hits="1"></line>
+					</lines>
+				</class>
+			</classes>
+		</package>
+	</packages>
+</coverage>
diff --git a/internal/test/example_go_unified.diff b/internal/test/example_go_unified.diff
new file mode 100644
index 0000000..740214e
--- /dev/null
+++ b/internal/test/example_go_unified.diff
@@ -0,0 +1,321 @@
+diff --git a/.drone.yml b/.drone.yml
+new file mode 100644
+index 0000000..1b77a7b
+--- /dev/null
++++ b/.drone.yml
+@@ -0,0 +1,33 @@
++build: &build
++  image: golang:1.11.2
++  environment:
++  - CGO_ENABLED=0
++  - GOOS=linux
++  commands:
++  - go get -u github.com/golang/dep/cmd/dep
++  - go get -u github.com/alecthomas/gometalinter
++  - gometalinter --install
++  - dep ensure
++  - go test -v -coverpkg=./... -coverprofile=coverage.txt ./...
++  - go tool cover -func=coverage.txt
++  - ./bin/lint.sh
++  - go build -a -installsuffix cgo -o plugin .
++
++workspace:
++  base: /go
++  path: src/github.com/target/pull-request-code-coverage
++
++pipeline:
++
++  #build on push
++  build-push:
++    when:
++      event: [push]
++      branch: [master]
++    <<: *build
++
++  #build on pr
++  build-on-pr:
++    when:
++      event: [pull_request]
++    <<: *build
+diff --git a/.gitignore b/.gitignore
+new file mode 100644
+index 0000000..432f8c2
+--- /dev/null
++++ b/.gitignore
+@@ -0,0 +1,4 @@
++.idea
++coverage.txt
++vendor/
++/plugin
+diff --git a/Dockerfile b/Dockerfile
+new file mode 100644
+index 0000000..b8f15a5
+--- /dev/null
++++ b/Dockerfile
+@@ -0,0 +1,18 @@
++FROM golang:1.11.2
++RUN go get -u github.com/golang/dep/cmd/dep
++RUN go get -u github.com/alecthomas/gometalinter
++RUN gometalinter --install
++COPY . /go/src/github.com/target/pull-request-code-coverage
++WORKDIR /go/src/github.com/target/pull-request-code-coverage
++RUN dep ensure
++RUN go test -v -coverpkg=./... -coverprofile=coverage.txt ./...
++RUN go tool cover -func=coverage.txt
++RUN ./bin/lint.sh
++RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o plugin .
++
++FROM alpine:latest
++RUN apk --no-cache add ca-certificates git
++WORKDIR /root/
++COPY --from=0 /go/src/github.com/target/pull-request-code-coverage/plugin .
++COPY scripts/start.sh .
++CMD ["./start.sh"]
+\ No newline at end of file
+diff --git a/Gopkg.lock b/Gopkg.lock
+new file mode 100644
+index 0000000..13d44da
+--- /dev/null
++++ b/Gopkg.lock
+@@ -0,0 +1,44 @@
++# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.
++
++
++[[projects]]
++  digest = "1:0a69a1c0db3591fcefb47f115b224592c8dfa4368b7ba9fae509d5e16cdc95c8"
++  name = "github.com/konsorten/go-windows-terminal-sequences"
++  packages = ["."]
++  pruneopts = "UT"
++  revision = "5c8c8bd35d3832f5d134ae1e1e375b69a4d25242"
++  version = "v1.0.1"
++
++[[projects]]
++  digest = "1:69b1cc331fca23d702bd72f860c6a647afd0aa9fcbc1d0659b1365e26546dd70"
++  name = "github.com/sirupsen/logrus"
++  packages = ["."]
++  pruneopts = "UT"
++  revision = "bcd833dfe83d3cebad139e4a29ed79cb2318bf95"
++  version = "v1.2.0"
++
++[[projects]]
++  branch = "master"
++  digest = "1:3f3a05ae0b95893d90b9b3b5afdb79a9b3d96e4e36e099d841ae602e4aca0da8"
++  name = "golang.org/x/crypto"
++  packages = ["ssh/terminal"]
++  pruneopts = "UT"
++  revision = "e4dc69e5b2fd71dcaf8bd5d054eb936deb78d1fa"
++
++[[projects]]
++  branch = "master"
++  digest = "1:6a875550c3b582f6c2d7e2ce44aba792511f00016d7c46b0a4fb26f730ef3058"
++  name = "golang.org/x/sys"
++  packages = [
++    "unix",
++    "windows",
++  ]
++  pruneopts = "UT"
++  revision = "66b7b1311ac80bbafcd2daeef9a5e6e2cd1e2399"
++
++[solve-meta]
++  analyzer-name = "dep"
++  analyzer-version = 1
++  input-imports = ["github.com/sirupsen/logrus"]
++  solver-name = "gps-cdcl"
++  solver-version = 1
+diff --git a/Gopkg.toml b/Gopkg.toml
+new file mode 100644
+index 0000000..d7072c2
+--- /dev/null
++++ b/Gopkg.toml
+@@ -0,0 +1,30 @@
++# Gopkg.toml example
++#
++# Refer to https://golang.github.io/dep/docs/Gopkg.toml.html
++# for detailed Gopkg.toml documentation.
++#
++# required = ["github.com/user/thing/cmd/thing"]
++# ignored = ["github.com/user/project/pkgX", "bitbucket.org/user/project/pkgA/pkgY"]
++#
++# [[constraint]]
++#   name = "github.com/user/project"
++#   version = "1.0.0"
++#
++# [[constraint]]
++#   name = "github.com/user/project2"
++#   branch = "dev"
++#   source = "github.com/myfork/project2"
++#
++# [[override]]
++#   name = "github.com/x/y"
++#   version = "2.4.0"
++#
++# [prune]
++#   non-go = false
++#   go-tests = true
++#   unused-packages = true
++
++
++[prune]
++  go-tests = true
++  unused-packages = true
+diff --git a/bin/lint.sh b/bin/lint.sh
+new file mode 100755
+index 0000000..6e69381
+--- /dev/null
++++ b/bin/lint.sh
+@@ -0,0 +1,31 @@
++#!/usr/bin/env bash
++
++gometalinter --install
++
++echo "Checking gometalinter..."
++
++CONCURRENCY=${CONCURRENCY:-8}
++
++gometalinter \
++	--deadline=300s \
++	--concurrency=$CONCURRENCY \
++	--skip=vendor \
++	--exclude="should have comment or be unexported" \
++	./...
++
++if [ $? -eq 1 ]; then
++    exit 1
++fi
++
++EXIT_CODE=0
++
++echo "Checking gofmt..."
++
++for file in `ls |grep -v vendor | xargs -I {} find {} -name "*.go"|xargs -I {} gofmt -l {}`; do
++	echo "need to format $file"
++	EXIT_CODE=1
++done
++
++if [ $EXIT_CODE == 1 ]; then
++  exit 1
++fi
+\ No newline at end of file
+diff --git a/internal/plugin/calculator/calculator.go b/internal/plugin/calculator/calculator.go
+new file mode 100644
+index 0000000..92e8dc7
+--- /dev/null
++++ b/internal/plugin/calculator/calculator.go
+@@ -0,0 +1,50 @@
++package calculator
++
++import (
++	"fmt"
++	"github.com/target/pull-request-code-coverage/internal/plugin/coverage"
++	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
++	"github.com/pkg/errors"
++	"strings"
++)
++
++type Coverage interface {
++	DetermineCoverage(changedLines []domain.SourceLine, coverageReport coverage.Report) ([]domain.SourceLineCoverage, error)
++}
++
++func NewCoverage() *DefaultCoverage {
++	return &DefaultCoverage{}
++}
++
++type DefaultCoverage struct{}
++
++func (*DefaultCoverage) DetermineCoverage(changedLines []domain.SourceLine, coverageReport coverage.Report) ([]domain.SourceLineCoverage, error) {
++	var result []domain.SourceLineCoverage
++
++	for _, sl := range changedLines {
++
++		if sl.Module != coverageReport.Name() {
++			return nil, errors.Errorf("Coverage report %v did not match the module %v", sl.Module, coverageReport.Name())
++		}
++
++		if strings.HasSuffix(sl.FileName, "reporter.go") {
++			fmt.Println(sl.FileName)
++		}
++
++		coverageData, found := coverageReport.GetCoverageData(sl.Module, sl.SrcDir, sl.Pkg, sl.FileName, sl.LineNumber)
++
++		if found {
++			result = append(result, domain.SourceLineCoverage{
++				SourceLine:   sl,
++				CoverageData: *coverageData,
++			})
++		} else {
++			result = append(result, domain.SourceLineCoverage{
++				SourceLine:   sl,
++				CoverageData: domain.CoverageData{},
++			})
++		}
++	}
++
++	return result, nil
++}
+diff --git a/internal/plugin/coverage/cobertura/report.go b/internal/plugin/coverage/cobertura/report.go
+new file mode 100644
+index 0000000..27ed6c3
+--- /dev/null
++++ b/internal/plugin/coverage/cobertura/report.go
+@@ -0,0 +1,142 @@
++package cobertura
++
++import (
++	"encoding/xml"
++	"github.com/target/pull-request-code-coverage/internal/plugin/coverage"
++	"github.com/target/pull-request-code-coverage/internal/plugin/domain"
++	"io"
++	"io/ioutil"
++	"os"
++	"strings"
++)
++
++type DefaultLoader struct {
++	sourceDir   string
++	readAllFunc func(io.Reader) ([]byte, error)
++}
++
++func NewReportLoader(sourceDir string) *DefaultLoader {
++	return &DefaultLoader{
++		readAllFunc: ioutil.ReadAll,
++		sourceDir:   sourceDir,
++	}
++}
++
++func (l *DefaultLoader) Load(coverageFile string) (coverage.Report, error) {
++	// nolint: gosec
++	//TODO err
++	xmlFile, _ := os.Open(coverageFile)
++
++	//if openFileErr != nil {
++	//	return nil, errors.Wrapf(openFileErr, "Could not open xml file %v", coverageFile)
++	//}
++
++	//TODO err
++	defer xmlFile.Close()
++
++	//TODO err
++	byteValue, _ := l.readAllFunc(xmlFile)
++	//if readAllErr != nil {
++	//	return nil, errors.Wrapf(readAllErr, "Failed reading in all of coverage file %v", coverageFile)
++	//}
++
++	//TODO err
++	var coverageReport Report
++	xml.Unmarshal(byteValue, &coverageReport)
++
++	coverageReport.sourceDir = l.sourceDir
++
++	return &coverageReport, nil
++}
++
++type Report struct {
++	XMLName xml.Name `xml:"coverage"`
++
++	sourceDir        string
++	ReportName       string           `xml:"name,attr"`
++	PackageContainer PackageContainer `xml:"packages"`
++}
++
++func (r *Report) Name() string {
++	return 
\ No newline at end of file
diff --git a/internal/test/extralines_block_sample_unified.diff b/internal/test/extralines_block_sample_unified.diff
new file mode 100644
index 0000000..6f7ce62
--- /dev/null
+++ b/internal/test/extralines_block_sample_unified.diff
@@ -0,0 +1,15 @@
+diff --git a/category-search/test.something b/category-search/test.something
+new file mode 100644
+index 0000000..d5418b3
+--- /dev/null
++++ b/category-search/test.something
+@@ -0,0 +1,3 @@
++hello
++world
++there
++extra
+@@ -1,3 +0,0 @@
+-dependencies {
+-	compile project(':search-common')
+-}
+\ No newline at end of file
diff --git a/internal/test/jacocoTestEmptyReport.xml b/internal/test/jacocoTestEmptyReport.xml
new file mode 100644
index 0000000..0295c70
--- /dev/null
+++ b/internal/test/jacocoTestEmptyReport.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN"
+        "report.dtd">
+<report name="category-search">
+</report>
\ No newline at end of file
diff --git a/internal/test/jacocoTestReport.json b/internal/test/jacocoTestReport.json
new file mode 100644
index 0000000..9e26dfe
--- /dev/null
+++ b/internal/test/jacocoTestReport.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/internal/test/jacocoTestReport.xml b/internal/test/jacocoTestReport.xml
new file mode 100644
index 0000000..090ce56
--- /dev/null
+++ b/internal/test/jacocoTestReport.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN"
+        "report.dtd">
+<report name="category-search">
+    <sessioninfo id="f018984fad61-ced1e4fe" start="1541613826867" dump="1541613830700"/>
+    <sessioninfo id="f018984fad61-7d4ea663" start="1541613832225" dump="1541613870310"/>
+    <package name="com/tgt">
+        <sourcefile name="CategorySearchApplication.java">
+            <line nr="18" mi="0" ci="3" mb="0" cb="0"/>
+            <line nr="27" mi="0" ci="10" mb="0" cb="0"/>
+            <line nr="28" mi="0" ci="4" mb="0" cb="0"/>
+            <line nr="29" mi="0" ci="9" mb="0" cb="0"/>
+            <line nr="50" mi="0" ci="8" mb="0" cb="0"/>
+            <line nr="52" mi="3" ci="0" mb="0" cb="0"/>
+            <line nr="36" mi="0" ci="3" mb="0" cb="0"/>
+            <line nr="37" mi="0" ci="8" mb="0" cb="0"/>
+            <line nr="38" mi="0" ci="2" mb="0" cb="0"/>
+        </sourcefile>
+    </package>
+</report>
\ No newline at end of file
diff --git a/internal/test/mocks/property_getter.go b/internal/test/mocks/property_getter.go
new file mode 100644
index 0000000..708966b
--- /dev/null
+++ b/internal/test/mocks/property_getter.go
@@ -0,0 +1,16 @@
+package mocks
+
+import "github.com/stretchr/testify/mock"
+
+type MockPropertyGetter struct {
+	mock.Mock
+}
+
+func NewMockPropertyGetter() *MockPropertyGetter {
+	return &MockPropertyGetter{}
+}
+
+func (m *MockPropertyGetter) GetProperty(s string) (string, bool) {
+	args := m.Called(s)
+	return args.Get(0).(string), args.Bool(1)
+}
diff --git a/internal/test/sample_unified.diff b/internal/test/sample_unified.diff
new file mode 100644
index 0000000..4d1996d
--- /dev/null
+++ b/internal/test/sample_unified.diff
@@ -0,0 +1,58 @@
+diff --git a/category-search/build.gradle b/category-search/build.gradle
+deleted file mode 100755
+index d2b532c..0000000
+--- a/category-search/build.gradle
++++ /dev/null
+@@ -1,3 +0,0 @@
+-dependencies {
+-	compile project(':search-common')
+-}
+\ No newline at end of file
+diff --git a/category-search/test.something b/category-search/test.something
+new file mode 100644
+index 0000000..d5418b3
+--- /dev/null
++++ b/category-search/test.something
+@@ -0,0 +1,3 @@
++hello
++world
++there
+index 17c8964..8c5cbec 100755
+--- a/category-search/gradle.properties
++++ b/category-search/gradle.properties
+@@ -1,14 +1,2 @@
+-excludeCodeCoverageClasses=com.tgt.search.common.entity.*,com.tgt.search.common.config.AppConfig,\
+-	com.tgt.search.common.constants.*,com.tgt.search.common.cache.FacetsCache,,com.tgt.search.common.cache.CategoryCache,\
+-	com.tgt.KeywordSearchApplication,com.tgt.search.features.*,\
+-	com.tgt.KeywordSearchApplication.JsonpAdvice,com.tgt.search.spellcheck*,\
+-	com.tgt.search.classifier.MultiClassifierBoostPredictions,com.tgt.search.entity.MicroServicesResponse,\
+-	com.tgt.search.facetranking.FacetsList,com.tgt.search.facetranking.FacetData,com.tgt.search.facetranking.FacetRankResponse,\
+-	com.tgt.search.classifier.MultiClassifierResponse,com.tgt.search.component.MMClassifier,\
+-	com.tgt.search.concurrency.SpellRulesClassifierASyncService,\
+-	com.tgt.search.builder.solrquery.StoresParamBuilder,com.tgt.search.lnr.*,com.tgt.search.classifier.ClassifierService,\
+-	com.tgt.search.builder.solrquery.FilterParamBuilder,com.tgt.search.metrics.*,com.tgt.search.config.*,\
+-	com.tgt.search.filter.*,com.tgt.search.facade.KeywordSearchFacadeImpl,com.tgt.search.component.SpellRulesFacetClassifierResponseBuilder,\
+-	com.tgt.search.cache.*,com.tgt.search.rest.resource.SystemResource,com.tgt.search.rest.resource.CacheStatsResource,\
+-	com.tgt.search.edabi.*,com.tgt.search.utils.*,com.tgt.search.builder.solrquery.FilterStrategy,com.tgt.search.builder.AuditStreamBuilder
+-version=0.3.2
+\ No newline at end of file
++excludeCodeCoverageClasses=
++version=0.3.2
+diff --git a/category-search/src/main/java/com/tgt/CategorySearchApplication.java b/category-search/src/main/java/com/tgt/CategorySearchApplication.java
+index bf7d601..a3827e9 100755
+--- a/category-search/src/main/java/com/tgt/CategorySearchApplication.java
++++ b/category-search/src/main/java/com/tgt/CategorySearchApplication.java
+@@ -49,0 +50,3 @@ public class CategorySearchApplication extends SpringBootServletInitializer {
++    counter++
++
++    System.out.print("Something");
+@@ -70 +71,0 @@ public class CategorySearchApplication extends SpringBootServletInitializer {
+-
+diff --git a/category-search/src/main/java/com/tgt/SomethingElse.java b/category-search/src/main/java/com/tgt/SomethingElse.java
+index bf7d601..a3827e9 100755
+--- a/category-search/src/main/java/com/tgt/SomethingElse.java
++++ b/category-search/src/main/java/com/tgt/SomethingElse.java
+@@ -49,0 +50 @@
++    System.out.print("Something 2");
+@@ -70 +71,0 @@
+-
\ No newline at end of file
diff --git a/internal/test/unfinished_block_2_sample_unified.diff b/internal/test/unfinished_block_2_sample_unified.diff
new file mode 100644
index 0000000..726b742
--- /dev/null
+++ b/internal/test/unfinished_block_2_sample_unified.diff
@@ -0,0 +1,12 @@
+diff --git a/category-search/test.something b/category-search/test.something
+new file mode 100644
+index 0000000..d5418b3
+--- /dev/null
++++ b/category-search/test.something
+@@ -0,0 +1,3 @@
++hello
+@@ -1,3 +0,0 @@
+-dependencies {
+-	compile project(':search-common')
+-}
+\ No newline at end of file
diff --git a/internal/test/unfinished_block_sample_unified.diff b/internal/test/unfinished_block_sample_unified.diff
new file mode 100644
index 0000000..2f7a664
--- /dev/null
+++ b/internal/test/unfinished_block_sample_unified.diff
@@ -0,0 +1,17 @@
+diff --git a/category-search/test.something b/category-search/test.something
+new file mode 100644
+index 0000000..d5418b3
+--- /dev/null
++++ b/category-search/test.something
+@@ -0,0 +1,3 @@
++hello
+diff --git a/category-search/build.gradle b/category-search/build.gradle
+deleted file mode 100755
+index d2b532c..0000000
+--- a/category-search/build.gradle
++++ /dev/null
+@@ -1,3 +0,0 @@
+-dependencies {
+-	compile project(':search-common')
+-}
+\ No newline at end of file
diff --git a/main.go b/main.go
new file mode 100644
index 0000000..10dae0f
--- /dev/null
+++ b/main.go
@@ -0,0 +1,19 @@
+package main
+
+import (
+	"github.com/target/pull-request-code-coverage/internal/plugin"
+	log "github.com/sirupsen/logrus"
+	"os"
+)
+
+func main() {
+	err := plugin.NewRunner().Run(os.LookupEnv, os.Stdin, os.Stdout)
+
+	if err != nil {
+		log.WithFields(log.Fields{
+			"error": err,
+		}).Info("An unexpected error occurred")
+
+		os.Exit(1)
+	}
+}
diff --git a/scripts/start.sh b/scripts/start.sh
new file mode 100755
index 0000000..fe46fb8
--- /dev/null
+++ b/scripts/start.sh
@@ -0,0 +1,5 @@
+#!/usr/bin/env bash
+
+set -Eeuo pipefail
+
+git --no-pager diff --unified=0 master | ./plugin
\ No newline at end of file
